'use strict';

var _Map = require('babel-runtime/core-js/map')['default'];

var d3 = require('d3');
var wavesControllers = require('waves-basic-controllers');
wavesControllers.setTheme('dark');
var wavesAudio = require('waves-audio');
var wavesLoaders = require('waves-loaders');
// core
var ns = require('waves-ui/dist/core/namespace');
var Timeline = require('waves-ui/dist/core/timeline');
var TimeContext = require('waves-ui/dist/core/time-context');
var Layer = require('waves-ui/dist/core/layer');
// interactions
var Event = require('waves-ui/dist/interactions/event');
var Surface = require('waves-ui/dist/interactions/surface');
var Keyboard = require('waves-ui/dist/interactions/keyboard');
// shapes
var Waveform = require('waves-ui/dist/shapes/waveform');
var Cursor = require('waves-ui/dist/shapes/cursor');
// timeline states
var BaseState = require('waves-ui/dist/timeline-states/base-state');
var SelectionState = require('waves-ui/dist/timeline-states/selection-state');
var EditionState = require('waves-ui/dist/timeline-states/edition-state');
var ContextEditionState = require('waves-ui/dist/timeline-states/context-edition-state');

// -----------------------------------------------------
// APPLICATION
// -----------------------------------------------------

var session = require('../assets/json/session.json');
// load all files
var filesSrc = './assets/sound/';
var loader = new wavesLoaders.AudioBufferLoader();
var files = [];

var width = window.innerWidth;
var height = window.innerHeight;

// dev only
//session = session.slice(0, 2);
//height = height / 3;
// populate files
session.forEach(function (track, index) {
  track.period.forEach(function (sample) {
    var file = filesSrc + sample.file;
    files.push(file);
  });
});

loader.load(files).then(function (buffers) {
  App.initialize(session);
  App.populateSession(buffers);

  App.initAudio();

  App.createAudioTracks();
  App.createCursorTrack();

  App.addTestControllers();

  App.renderTimeline();
})['catch'](function (err) {
  console.log(err.stack);
});

// application
var App = {
  initialize: function initialize(session) {
    this.session = session;
    this.globals = { currentTime: 0, duration: 60 * 2 };
    this.layerEngineMap = new _Map();

    this.timeline = new Timeline({
      duration: this.globals.duration,
      width: 800
    });

    this.$container = document.querySelector('#session-container');
    // init default state
    var selectionState = new SelectionState(this.timeline);
    var contextEditionState = new ContextEditionState(this.timeline);

    this.timeline.setState(contextEditionState);
    this.timeline.on('update', this.onTimelineUpdate.bind(this));
  },

  addTestControllers: function addTestControllers() {
    var _this = this;

    var rAFId = null;
    var that = this;

    new wavesControllers.Buttons('transport', ['start', 'stop'], '#controls', function (value) {
      switch (value) {
        case 'start':
          _this.playControl.start();

          (function loop() {
            // console.log(that.transport.currentPosition);
            that.globals.currentTime = that.transport.currentPosition;
            that.timeline.update('cursor');

            rAFId = requestAnimationFrame(loop);
          })();
          break;
        case 'stop':
          _this.playControl.stop();
          cancelAnimationFrame(rAFId);
          _this.globals.currentTime = _this.transport.currentPosition;
          break;
      }
    });

    new wavesControllers.Slider('timeline stretchRatio', 0.1, 100, 0.1, 1, '', '', '#controls', function (value) {
      _this.timeline.context.stretchRatio = value;
      _this.timeline.update();
    });

    new wavesControllers.Slider('timeline translation', -this.globals.duration, this.globals.duration, 1, 0, '', '', '#controls', function (value) {
      _this.timeline.context.offset = value;
      _this.timeline.updateContainers();
    });

    new wavesControllers.Slider('waveform zoom y', 0.1, 10, 0.1, 1, '', '', '#controls', function (value) {
      var yDomain = [-1 / value, 1 / value];
      _this.timeline.layers.forEach(function (layer) {
        layer.yDomain = yDomain;
        _this.timeline.update(layer);
      });
    });
  },

  initAudio: function initAudio() {
    this.audioContext = wavesAudio.audioContext;
    this.transport = new wavesAudio.Transport();
    this.playControl = new wavesAudio.PlayControl(this.transport);
    this.playerEngines = {};
  },
  // add the buffers into the session configuration
  populateSession: function populateSession(buffers) {
    var index = 0;

    this.session.forEach(function (track) {
      track.period.forEach(function (sample) {
        sample.buffer = buffers[index];
        index += 1;
      });
    });
  },

  audioTrackTemplate: function audioTrackTemplate(data) {
    return '<div class="controls-container">\n        <h4>' + data.label + '</h4>\n      </div>\n      <div class="svg-container"></div>';
  },

  globalTrackTemplate: function globalTrackTemplate() {
    return '<div class="controls-container"></div>\n      <div class="svg-container"></div>';
  },

  // create the DOM structure for the session and add waveforms
  createAudioTracks: function createAudioTracks() {
    var _this2 = this;

    var trackHeight = 100; //Math.min(height / this.session.length) - 1;

    // create Tracks
    this.session.forEach(function (track, index) {
      // create a track element for each track
      var $track = document.createElement('li');
      $track.setAttribute('id', 'track-' + track.id);
      $track.classList.add('track');
      $track.style.height = '' + trackHeight + 'px';

      $track.innerHTML = _this2.audioTrackTemplate(track);
      _this2.$container.appendChild($track);

      var $sampleContainer = $track.querySelector('.svg-container');
      _this2.timeline.registerContainer(track.id, $sampleContainer, { height: trackHeight });

      _this2.playerEngines[track.id] = [];

      // create waveforms
      track.period.forEach(function (sample) {
        console.log(sample);
        var layer = new Layer('entity', sample.buffer.getChannelData(0), {
          height: trackHeight,
          yDomain: [-1, 1]
        });

        layer.setShape(Waveform, {
          y: function y(d) {
            return d;
          },
          sampleRate: function sampleRate() {
            return sample.buffer.sampleRate;
          }
        });

        _this2.timeline.add(layer, track.id, 'audio-track');

        var start = sample.begin / 1000;
        var duration = sample.buffer.duration;
        var end = start + duration;

        layer.editable = true;
        layer.setContextAttribute('start', start);
        layer.setContextAttribute('duration', duration);

        // init player engine
        var engine = new wavesAudio.PlayerEngine();
        engine.buffer = sample.buffer;
        engine.connect(_this2.audioContext.destination);

        var transportedEngine = _this2.transport.add(engine);
        _this2.layerEngineMap.set(layer, transportedEngine);
      });
    });
  },

  onTimelineUpdate: function onTimelineUpdate(layers) {
    var _this3 = this;

    layers.forEach(function (layer) {
      var contextAttributes = layer.contextAttributes;
      var engine = _this3.layerEngineMap.get(layer);
      // if the layer is not associated with an engine
      if (!engine) {
        return;
      }
      var start = contextAttributes.start;
      var end = start + contextAttributes.duration;
      var offset = start + contextAttributes.offset;
      // console.log(start, end, offset);

      engine.setBoundaries(start, end, offset);
    });
  },

  // add a cursor layer
  createCursorTrack: function createCursorTrack() {
    var $track = document.createElement('li');
    $track.setAttribute('id', 'cursor-layer');
    $track.classList.add('track', 'global');

    $track.innerHTML = this.globalTrackTemplate();
    this.$container.appendChild($track);

    var $cursorContainer = $track.querySelector('.svg-container');
    this.timeline.registerContainer('cursor', $cursorContainer, { height: height });

    var cursor = new Layer('entity', this.globals, { height: height });
    cursor.setShape(Cursor, {
      x: function x(d) {
        var v = arguments[1] === undefined ? null : arguments[1];

        if (v !== null) {
          d.currentTime = v;
        }
        return d.currentTime;
      }
    }, { color: 'red' });

    this.timeline.add(cursor, 'cursor', 'cursor');
  },

  renderTimeline: function renderTimeline() {
    this.timeline.render();

    this.timeline.draw();
    this.timeline.update();

    // cursor
    var prev = new Date().getTime();
    // const that = this;

    // (function loop() {
    //   const now = new Date().getTime();
    //   const delta = (now - prev) / 1000;
    //   that.globals.currentTime += delta;
    //   that.timeline.update();
    //   prev = now;

    //   requestAnimationFrame(loop);
    // }());
  }
};
//# sourceMappingURL=data:application/json;base64,